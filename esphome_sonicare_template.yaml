####################################################################################################
#####                                  ESPHome BLE Sonicare                                    #####
#####                      Repository: https://github.com/edwardtfn/sonicare                   #####
####################################################################################################
##### Purpose: Philips Sonicare BLE connectivity template for ESPHome                          #####
####################################################################################################
##### Author: edwardtfn - https://github.com/edwardtfn - https://buymeacoffee.com/edwardfirmo  #####
####################################################################################################
##### NOTE:                                                                                    #####
##### - Make changes ONLY if absolutely necessary and you have the required knowledge.         #####
##### - For normal system use, modifications to this file are NOT required.                    #####
####################################################################################################
---
substitutions:
  sonicare_name: Philips Sonicare
  sonicare_id: sonicare
  sonicare_mac: 00:00:00:00:00:00
  sonicare_session_timeout_seconds: '600'
  sonicare_text_state_off: "Off"
  sonicare_text_state_standby: "Standby"
  sonicare_text_state_on: "On"
  sonicare_text_state_charging: "Charging"
  sonicare_text_state_shutdown: "Shutdown"
  sonicare_text_state_validate: "Validate"
  sonicare_text_state_lights_off: "Lights off"
  sonicare_text_state_disconnected: "Disconnected"
  sonicare_text_state_unknown: "Unknown"

binary_sensor:
  - id: ${sonicare_id}_ble_connectivity
    name: ${sonicare_name} BLE Connectivity
    platform: template
    device_class: connectivity
    internal: false

ble_client:
  - mac_address: ${sonicare_mac}
    id: ${sonicare_id}
    name: ${sonicare_name}
    auto_connect: true
    on_connect:
      then:
        - binary_sensor.template.publish:
            id: ${sonicare_id}_ble_connectivity
            state: ON
        - lambda: |-
            static const char *const TAG = "sonicare.${sonicare_id}";
            ESP_LOGI(TAG, "Connected to '${sonicare_name}'");
    on_disconnect:
      then:
        - binary_sensor.template.publish:
            id: ${sonicare_id}_ble_connectivity
            state: OFF
        - lambda: |-
            static const char *const TAG = "sonicare.${sonicare_id}";
            ESP_LOGI(TAG, "Disconnected from '${sonicare_name}'");

esp32_ble_tracker:

globals:
  - id: ${sonicare_id}_battery_last_value
    type: uint8_t
    restore_value: true
    initial_value: '255'

  - id: ${sonicare_id}_session_active_seconds
    type: uint16_t
    restore_value: true
    initial_value: '0'
  
  - id: ${sonicare_id}_total_active_seconds
    type: uint32_t
    restore_value: true
    initial_value: '0'

  - id: ${sonicare_id}_last_state
    type: uint8_t
    restore_value: true
    initial_value: '255'

script:
  - id: ${sonicare_id}_update_last_state
    mode: restart
    parameters:
      new_state: uint8_t
    then:
      - lambda: |-
          static const char *const TAG = "sonicare.${sonicare_id}";
          const bool updated = id(${sonicare_id}_last_state) != new_state;
          if (updated) {
            ESP_LOGI(TAG, "New status received: %" PRIu8, new_state);
            id(${sonicare_id}_last_state) = new_state;
            id(${sonicare_id}_update_last_state_text).execute();
          }

  - id: ${sonicare_id}_update_last_state_text
    mode: restart
    then:
      - lambda: |-
          switch (id(${sonicare_id}_last_state)) {
            case 0x00:
              id(${sonicare_id}_state).publish_state("${sonicare_text_state_off}");
              break;
            case 0x01:
              id(${sonicare_id}_state).publish_state("${sonicare_text_state_standby}");
              break;
            case 0x02:
              id(${sonicare_id}_state).publish_state("${sonicare_text_state_on}");
              break;
            case 0x03:
              id(${sonicare_id}_state).publish_state("${sonicare_text_state_charging}");
              break;
            case 0x04:
              id(${sonicare_id}_state).publish_state("${sonicare_text_state_shutdown}");
              break;
            case 0x05:
              id(${sonicare_id}_state).publish_state("${sonicare_text_state_validate}");
              break;
            case 0x07:
              id(${sonicare_id}_state).publish_state("${sonicare_text_state_lights_off}");
              break;
            case 0xFF:
              id(${sonicare_id}_state).publish_state("${sonicare_text_state_disconnected}");
              break;
            default:
              id(${sonicare_id}_state).publish_state("${sonicare_text_state_unknown}");
              break;
          }

sensor:
  - id: ${sonicare_id}_battery_raw_value
    name: ${sonicare_name} Battery RAW value
    platform: ble_client
    ble_client_id: ${sonicare_id}
    type: characteristic
    service_uuid: 180F
    characteristic_uuid: 2A19
    notify: true
    unit_of_measurement: '%'
    device_class: battery
    internal: true
    on_value:
      then:
        - lambda: |-
            static const char *const TAG = "sonicare.${sonicare_id}";
            const uint8_t raw_value = static_cast<uint8_t>(x);
            if (id(${sonicare_id}_ble_connectivity).state) {
              if (raw_value >= 0 && raw_value <= 100) {
                id(${sonicare_id}_battery_last_value) = raw_value;
                ESP_LOGD(TAG, "Battery value updated: %" PRIu8 "%%", raw_value);
              } else {
                ESP_LOGD(TAG, "Received invalid battery value: %" PRIu8, raw_value);
              }
            } else {
              ESP_LOGD(TAG, "Battery value not updated as the device is not connected");
            }

  - id: ${sonicare_id}_battery
    name: ${sonicare_name} Battery
    platform: template
    lambda: |-
      if (id(${sonicare_id}_battery_last_value) >= 0 and
          id(${sonicare_id}_battery_last_value) <= 100)
        return id(${sonicare_id}_battery_last_value);
      else
        return NAN;
    device_class: battery
    unit_of_measurement: '%'
    accuracy_decimals: 0

  - id: ${sonicare_id}_active_seconds
    name: ${sonicare_name} Active
    platform: ble_client
    ble_client_id: ${sonicare_id}
    type: characteristic
    service_uuid: 477ea600-a260-11e4-ae37-0002a5d50002
    characteristic_uuid: 477ea600-a260-11e4-ae37-0002a5d54090
    notify: true
    device_class: duration
    accuracy_decimals: 0
    unit_of_measurement: s
    internal: true
    on_value:
      then:
        - lambda: |-
            static const char *const TAG = "sonicare.${sonicare_id}";
            const uint16_t raw_value = static_cast<uint16_t>(x);
            if (id(${sonicare_id}_ble_connectivity).state) {
              if (raw_value >= 0 && raw_value <= ${sonicare_session_timeout_seconds}) {
                if (raw_value < id(${sonicare_id}_session_active_seconds)) {
                  id(${sonicare_id}_total_active_seconds) +=
                    id(${sonicare_id}_session_active_seconds);
                  id(${sonicare_id}_total_active_time).publish_state(id(${sonicare_id}_total_active_seconds));
                }
                id(${sonicare_id}_session_active_seconds) = raw_value;
                id(${sonicare_id}_session_active_time).publish_state(raw_value);
                ESP_LOGD(TAG, "Session active time in seconds updated: %" PRIu16,
                        id(${sonicare_id}_session_active_seconds));
              } else {
                ESP_LOGD(TAG, "Received invalid session active time in seconds value: %" PRIu16, raw_value);
              }
            } else {
              ESP_LOGD(TAG, "Session active time in seconds not updated because the device is not connected");
            }

  - id: ${sonicare_id}_session_active_time
    name: ${sonicare_name} Session Active Time
    platform: template
    lambda: |-
      return id(${sonicare_id}_session_active_seconds);
    device_class: duration
    unit_of_measurement: s
    accuracy_decimals: 0

  - id: ${sonicare_id}_total_active_time
    name: ${sonicare_name} Total Active Time
    platform: template
    lambda: |-
      return id(${sonicare_id}_total_active_seconds);
    device_class: duration
    unit_of_measurement: s
    accuracy_decimals: 0

  - id: ${sonicare_id}_status
    name: ${sonicare_name} Status
    platform: ble_client
    ble_client_id: ${sonicare_id}
    type: characteristic
    service_uuid: 477ea600-a260-11e4-ae37-0002a5d50001
    characteristic_uuid: 477ea600-a260-11e4-ae37-0002a5d54010
    notify: true
    update_interval: 5s
    internal: true
    on_value:
      then:
        - script.execute:
            id: ${sonicare_id}_update_last_state
            new_state: !lambda |-
                            return id(${sonicare_id}_ble_connectivity).state
                                        ? static_cast<uint8_t>(x)
                                        : 0xFF;  // Disconnected flag

text_sensor:
  - id: ${sonicare_id}_state
    name: ${sonicare_name} State
    platform: template 
    icon: mdi:toothbrush-electric
...
